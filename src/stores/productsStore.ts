import { makeAutoObservable } from "mobx";

interface IProduct {
  id: number;
  productName: string;
  description: string;
  price: string;
  currency: string;
  quantity: string;
  image: string;
}

const BASE_URL = "http://localhost:7777";

class ProductsStore {
  products: IProduct[];
  isLoading: boolean;
  error: string | null;

  constructor() {
    this.products = [];
    this.isLoading = false;
    this.error = null;

    makeAutoObservable(this);
  }

  setIsLoading(isLoading: boolean) {
    this.isLoading = isLoading;
  }

  setError(error: string | null) {
    this.error = error;
  }

  async getProducts() {
    try {
      this.setIsLoading(true);
      this.setError(null);

      const res = await fetch(`${BASE_URL}/products`);
      if (!res.ok) {
        throw new Error(
          "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò£... –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º"
        );
      }

      const data = await res.json();

      if (!data.products || !Array.isArray(data.products)) {
        throw new Error("–î–∞–Ω—ñ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ");
      }

      this.products = data.products;
    } catch (err) {
      this.setError(err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞");
      console.error(err);
    } finally {
      this.setIsLoading(false);
    }
  }
}

const productsStore = new ProductsStore();
export default productsStore;
